using System;
using UnityEngine;
using System.Collections;


public class SheepBehaviour : MonoBehaviour
{
    private float m_Height;
    public float m_JumpHeight = 2.0f;
    public float m_UpdateTime = 0.5f;
    public float m_MinInfluenceRadius = 100.0f;
    public float m_MaxInfluenceRadius = 120.0f;
    public float m_MinRunDistance = 10.0f;
    public float m_MaxRunDistance = 30.0f;

    private float m_UpdateTimer;
    private float m_RandomOffset;
    private Vector3 m_TargetPos;
    private GameObject m_Herder;
	// Use this for initialization
	void Start ()
	{
	    m_RandomOffset = UnityEngine.Random.Range(0, 100.0f);

	    m_Height = transform.position.y;
	    m_UpdateTimer = m_UpdateTime;

	    m_Herder = GameObject.Find("Shepherd");
	    m_TargetPos = transform.position;
	}
	
	// Update is called once per frame
	void Update ()
	{
	    Jump();
	    HandleMovement();
	}

    private void HandleMovement()
    {
        m_UpdateTimer -= Time.deltaTime;
        if (m_UpdateTimer < 0)
        {
            Vector3 moveDir = transform.position - m_Herder.transform.position;
            float dist = moveDir.magnitude;
            if (dist < m_MaxInfluenceRadius)
            {
                moveDir.Normalize();

                moveDir = Quaternion.Euler(0, UnityEngine.Random.Range(-45, 45), 0) * moveDir;
                float moveDist = UnityEngine.Random.Range(m_MinRunDistance, m_MaxRunDistance);
                if (dist > m_MinInfluenceRadius)
                {
                    moveDist *=
                        Mathf.Clamp(((moveDist - m_MinInfluenceRadius)/(m_MaxInfluenceRadius - m_MinInfluenceRadius)), 0,
                            1);
                }
                m_TargetPos = transform.position + (moveDir * moveDist);
            }
            m_UpdateTimer = m_UpdateTime;
        }

        Vector3 newPos = Vector3.Lerp(transform.position, m_TargetPos, Time.deltaTime);
        transform.position = newPos;
    }

    void Jump()
    {
        Vector3 pos = transform.position;
        pos.y = m_Height + (float)(Math.Abs(Math.Sin((Time.time + m_RandomOffset) * 4.0f)*m_JumpHeight));
        transform.position = pos;
    }
   
}
